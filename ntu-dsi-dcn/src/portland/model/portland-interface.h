/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Dhruv Sharma  <dhsharma@cs.ucsd.edu>
 */
#ifndef PORTLAND_INTERFACE_H
#define PORTLAND_INTERFACE_H 1

#include <assert.h>
#include <errno.h>

// Include OFSI code
#include "ns3/simulator.h"
#include "ns3/log.h"
#include "ns3/net-device.h"
#include "ns3/packet.h"
#include "ns3/address.h"
#include "ns3/nstime.h"
#include "ns3/mac48-address.h"
#include "ns3/ipv4-address.h"

#include <set>
#include <map>
#include <limits>

#include "portland-switch-net-device.h"
#include "portlandProtocol.h"

namespace ns3 {

class PortlandSwitchNetDevice;

namespace pld {

// Message information for fabric manager
typedef struct BufferData {
    PACKET_TYPE pkt_type; // PACKET_TYPE enum defined in portlandProtocol.h
    void* message; // Need to cast the message based on the packet type
} BufferData;

typedef struct PMACRegister {
    Ipv4Address hostIP;
    Mac48Address PMACAddress;
} PMACRegister;

typedef struct ARPRequest {
    Ipv4Address destIPAddress;
    Ipv4Address srcIPAddress;
    Mac48Address srcPMACAddress;
} ARPRequest;

typedef struct ARPResponse {
	Ipv4Address destIPAddress;
	Mac48Address destPMACAddress;
	Ipv4Address srcIPAddress;
  Mac48Address srcPMACAddress;
} ARPResponse;

typedef struct ARPFloodRequest {
    Ipv4Address destIPAddress;
    Ipv4Address srcIPAddress;
    Mac48Address srcPMACAddress;
} ARPFloodIPAddress;

/**
 * \brief An interface for a FabricManager of PortlandSwitchNetDevices
 *
 * Follows the Portland specification for a fabric manager.
 */
class FabricManager : public Object {
public:
    static TypeId GetTypeId (void);

    ~FabricManager () {
        m_switches.clear ();
    }

  /**
   * Adds a switch to the fabric manager.
   *
   * \param swtch The switch to register.
   */
   virtual void AddSwitch (Ptr<PortlandSwitchNetDevice> swtch);

  /**
   * A switch calls this method to pass a message on to the Fabric Manager.
   *
   * \param swtch The switch the message was received from.
   * \param buffer The message.
   */
    BufferData ReceiveFromSwitch (Ptr<PortlandSwitchNetDevice> swtch, BufferData buffer);

private:

    // IP - PMAC table and management functions
    std::map<Ipv4Address, Mac48Address> IpPMACTable;
    std::map<Ipv4Address, Mac48Address>::iterator it;

    void addPMACToTable(Ipv4Address ip, Mac48Address pmac);

    Ipv4Address getIPforPMAC(Mac48Address pmac);
    
    bool isIPRegistered(Ipv4Address ip);

    Mac48Address getPMACforIP(Ipv4Address ip);

    bool isPmacRegistered (Mac48Address pmac);

    // Fabric manager function handlers for packet types
    BufferData PMACRegisterHandler(PMACRegister* message);

    BufferData ARPRequestHandler(ARPRequest* message, Ptr<PortlandSwitchNetDevice> swtch);

    BufferData ARPResponseHandler(ARPResponse* message, Ptr<PortlandSwitchNetDevice> swtch);

    // Packets being generated by the fabric manager
    void FloodARPRequest(ARPFloodRequest* message, Ptr<PortlandSwitchNetDevice> swtch);

protected:
  /**
   * \internal
   *
   * However the controller is implemented, this method is to
   * be used to pass a message on to a switch.
   */
   virtual void SendToSwitch (Ptr<PortlandSwitchNetDevice> swtch, BufferData buffer);

  /**
   * \internal
   *
   * Get the packet type on the buffer, which can then be used
   * to determine how to handle the buffer.
   */
    PACKET_TYPE GetPacketType (BufferData buffer);

    typedef std::set<Ptr<PortlandSwitchNetDevice> > Switches_t;
    Switches_t m_switches;  ///< The collection of switches registered to this controller.
};

}

}

#endif /* PORTLAND_INTERFACE_H */
